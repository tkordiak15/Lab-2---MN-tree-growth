---
title: "Exercises"
format: html
editor: visual
---
```{r}
install.packages("dplyr")
```

```{r}
library(dplyr)
tree_dat %>% summarise(n = n())
```
#1 There is alot of different peices to work with, but what I can identify is that there is simply a lot of rows and column of data. There are 8 different rows to separate the data. 
#2 There are 979 records made in stand 1. 
```{r}
tree_dat %>% filter(standID == 1) %>% tally()
```
# filter to subset rows basde on a condition; must equal (==) need two equal signs

# if i want to produce this tibble in the environment i can rename it (this is an assignment) and print it 
```{r}
tree_count1 <- tree_dat %>% filter(standID == 1)

print(tree_count1)
```

#3 There are 13033 records if the Abies Balsamea species and 4188 records for the Pinus strobus species.
```{r}
tree_dat %>% filter(species %in% c("ABBA", "PIST")) %>% count(species)
```
#count(species) counts both species 
# "c" is to combine multiple vectors together so one species with another species
# %in% lets r know that species is refering to the ABBA and PIST

#4 = There are 7 trees older than 200 years in the last year of the dataset. 
```{r}
last_year <- max(tree_dat$year, na.rm = TRUE)
tree_dat %>% filter(year ==last_year, age > 200) %>% tally()
```

#%in% and $ are the same thing and can be used interchangably 

#5 = The oldest tree found in the dataset using the slice_max tool was 269 years old. 
```{r}
tree_dat %>% slice_max(order_by = age, n = 1)

```
#order by - since we're using slice max were finding the oldest by age and n = 1 is selceting just 1 single oldest tree
# if i wanted to categorize the oldest tree i can do an assignment, where the oldest_tree is a copy of the tree_dat 

#6 In 2001, the five oldest trees had the treeID of 263, 259, 212, 206, 206. 
```{r}
tree_dat %>% filter(year == 2001) %>% slice_max(order_by = age, n = 5)
```

#7 There were 687 trees that are in the 30% sample from the year 2002. 
```{r}
tree_dat %>% filter(year == 2002) %>% slice_sample(prop = 0.3) 
```

#8 In 2007 within stand 5, the top three treeID's 128, 157, 135 had the greatest radius at breast height. 
```{r}
tree_dat %>% filter(year == 2005, standID == 5) %>% arrange(desc(rad_ib)) %>% slice_head(n = 3)
```

#9 From 2007, the three smallest trees measured had the treeID's 50, 56, 36. 
```{r}
tree_dat %>% select(treeID, standID, year, rad_ib) %>% filter(standID == 3, year == 2007) %>% slice_min(order_by = rad_ib, n = 3)
```

#10 
```{r}
tree_dat_modified <- tree_dat %>% select(-standID)
glimpse(tree_dat_modified)
```
#11
```{r}
tree_id_mod <- tree_dat %>% select(matches("ID"))
glimpse(tree_id_mod)
```

#12
```{r}
tree_12_mod <- tree_dat %>% select(contains("ID") |contains("stand"))
glimpse(tree_12_mod)
```
#13
```{r}
tree_dat <- tree_dat %>% rename(rad_ib_mm = rad_ib, inc_mm = inc)
glimpse(tree_dat)
```

#14 the mean Basal area column was 0.03696619 cm for the POTR species in 2007. 
```{r}
tree_dat <- tree_dat %>% mutate(rad_ib_cm = rad_ib_mm / 10, DBH_cm = 2 * rad_ib_cm, BA_m2 = 0.00007854 * (DBH_cm^2))
mean_BA_POTR_2007 <- tree_dat %>% filter(species == "POTR", year == 2007) %>% summarise(mean_BA_POTR_2007 = mean(BA_m2, na.rm = TRUE))
print(mean_BA_POTR_2007)
```

#15 there were 122503 records from established trees. 
```{r}
tree_dat <- tree_dat %>% mutate(established = if_else(age > 5, TRUE, FALSE))
established_count <- tree_dat %>% count(established)
```

#16 Pole had 1963 individuals, sapling was 252, and sawlog had 76 trees. 
```{r}
tree_dat <- tree_dat %>% mutate(DBH_class = case_when(DBH_cm < 2.5 ~ "seedling", DBH_cm >= 2.5 & DBH_cm < 10 ~ "sapling", DBH_cm >= 10 & DBH_cm < 30 ~ "pole", DBH_cm >= 30 ~ "sawlog"))
tree_dat_2007 <- tree_dat %>% filter(year == 2007)
tree_class_count <- tree_dat_2007 %>% count(DBH_class)
print(tree_class_count)
```

#17 the mean diameter in breast height was 16.09351cm, the standard deviation of diameter in breast height was 6.138643cm, this means that in 2007 the trees average diameter at breast height in cm was 16.09351 and deviated above and below the mean by 6.138643.
```{r}
DBH_stats <- tree_dat_2007 %>% summarise(mean_DBH = mean(DBH_cm, na.rm = TRUE), sd_DBH = sd(DBH_cm, na.rm = TRUE))
print(DBH_stats)
```
#18 THOC had an average age of 126.63830, the species FRNI averaged 83.08333 years and the PIST species had an average age of 73.28571. 
```{r}
tree_dat_2003 <- tree_dat %>% filter(year ==2003)
species_age_stats <- tree_dat_2003 %>% group_by(species) %>%
  summarise(mean_age = mean(age, na.rm = TRUE)) %>% arrange(desc(mean_age))
species_age_stats %>% top_n(3, mean_age)
print(species_age_stats)
```
#19 There are 111 years with unique records, and the first year recorded was 1897 and the last year recorded was 2007. 
```{r}
year_summary <- tree_dat %>% summarise(unique_years = n_distinct(year), first_year = min(year, na.rm = TRUE), last_year = max(year, na.rm = TRUE))
print(year_summary)
```

#20 These stands 1, 15, 16, 17, and 24 all have the largest amount of unique years at 111 years. 
```{r}
stand_year_count <- tree_dat %>% group_by(standID) %>% summarise(unique_years = n_distinct(year)) %>% ungroup()

max_unique_years <- stand_year_count %>% summarise(max_years = max(unique_years)) %>% pull(max_years)

stands_with_largest_record <- stand_year_count %>% filter(unique_years == max_unique_years)

print(stands_with_largest_record)
```
#FINAL QUESTION - The fastest growing tree is the Pinus Resinosa, then Thuja occidentalis, and Populus Grandidentata, while the slowest growing tree is the Abies Balsamea, Picea glauca, and Acer rebrum. 
```{r}
tree_growth <- tree_dat %>% arrange(standID, year) %>% group_by(standID) %>% mutate(annual_growth = DBH_cm - lag(DBH_cm)) %>% filter(!is.na(annual_growth))

tree_growth_filtered <- tree_growth %>% group_by(standID) %>% filter(n() >= 10)

species_growth_stats <- tree_growth_filtered %>% group_by(species) %>% summarise(avg_annual_growth = mean(annual_growth, na.rm = TRUE), sd_annual_growth = sd(annual_growth, na.rm = TRUE))  

fastest_growth_species <- species_growth_stats %>% slice_max(order_by = avg_annual_growth, n = 3)
slowest_growth_species <- species_growth_stats %>% slice_min(order_by = avg_annual_growth, n = 3)

print(fastest_growth_species)
print(slowest_growth_species)
```



## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
